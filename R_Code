BISECTION  METHOD 

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

int main() {
    double a, b, c;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter interval [a,b]: ";
    cin >> a >> b;

    if (f(a) * f(b) >= 0) {
        cout << "Invalid interval. f(a) and f(b) must have opposite signs." << endl;
        return 1;
    }

    int iteration = 0;
    while ((b - a) >= tolerance && iteration < maxIterations) {
        c = (a + b) / 2.0;

        if (f(c) == 0.0) {
            break;  // Found exact root
        } else if (f(c) * f(a) < 0) {
            b = c;
        } else {
            a = c;
        }
        iteration++;
    }

    cout << "The root is approximately: " << c << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}



SECANT  METHOD 

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

int main() {
    double x0, x1, x2;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter two initial guesses (x0 and x1): ";
    cin >> x0 >> x1;

    if (fabs(f(x0)) < tolerance) {
        cout << "The root is approximately: " << x0 << endl;
        cout << "Number of iterations: 0" << endl;
        return 0;
    }
    if (fabs(f(x1)) < tolerance) {
        cout << "The root is approximately: " << x1 << endl;
        cout << "Number of iterations: 0" << endl;
        return 0;
    }

    int iteration = 0;
    while (iteration < maxIterations) {
        // Prevent division by zero
        if (fabs(f(x1) - f(x0)) < 1e-15) {
            cout << "Division by zero error in secant method." << endl;
            return 1;
        }

        // Secant formula
        x2 = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0));

        if (fabs(x2 - x1) < tolerance) {
            break;  // Root found with required accuracy
        }

        // Prepare for next iteration
        x0 = x1;
        x1 = x2;

        iteration++;
    }

    cout << "The root is approximately: " << x2 << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}


REGULA FALSI 

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

int main() {
    double a, b, c;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter interval [a,b]: ";
    cin >> a >> b;

    if (f(a) * f(b) >= 0) {
        cout << "Invalid interval. f(a) and f(b) must have opposite signs." << endl;
        return 1;
    }

    int iteration = 0;
    while (iteration < maxIterations) {
        // Regula Falsi formula: c = b - f(b)*(b-a)/(f(b)-f(a))
        c = b - (f(b) * (b - a)) / (f(b) - f(a));

        if (fabs(f(c)) < tolerance) {
            break;  // Found root with required accuracy
        }

        if (f(a) * f(c) < 0) {
            b = c;
        } else {
            a = c;
        }

        iteration++;
    }

    cout << "The root is approximately: " << c << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

double df(double x) {
    return 2 * x;  // derivative of f(x) = x^2 - 4
}

int main() {
    double x0, x1;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter initial guess x0: ";
    cin >> x0;

    int iteration = 0;
    while (iteration < maxIterations) {
        double fx0 = f(x0);
        double dfx0 = df(x0);

        if (fabs(dfx0) < 1e-15) {
            cout << "Derivative near zero, cannot continue." << endl;
            return 1;
        }

        x1 = x0 - fx0 / dfx0;

        if (fabs(x1 - x0) < tolerance) {
            break;  // Converged
        }

        x0 = x1;
        iteration++;
    }

    cout << "The root is approximately: " << x1 << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}