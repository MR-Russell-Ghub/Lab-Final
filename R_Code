BISECTION  METHOD 

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

int main() {
    double a, b, c;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter interval [a,b]: ";
    cin >> a >> b;

    if (f(a) * f(b) >= 0) {
        cout << "Invalid interval. f(a) and f(b) must have opposite signs." << endl;
        return 1;
    }

    int iteration = 0;
    while ((b - a) >= tolerance && iteration < maxIterations) {
        c = (a + b) / 2.0;

        if (f(c) == 0.0) {
            break;  // Found exact root
        } else if (f(c) * f(a) < 0) {
            b = c;
        } else {
            a = c;
        }
        iteration++;
    }

    cout << "The root is approximately: " << c << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}




SECANT  METHOD 

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

int main() {
    double x0, x1, x2;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter two initial guesses (x0 and x1): ";
    cin >> x0 >> x1;

    if (fabs(f(x0)) < tolerance) {
        cout << "The root is approximately: " << x0 << endl;
        cout << "Number of iterations: 0" << endl;
        return 0;
    }
    if (fabs(f(x1)) < tolerance) {
        cout << "The root is approximately: " << x1 << endl;
        cout << "Number of iterations: 0" << endl;
        return 0;
    }

    int iteration = 0;
    while (iteration < maxIterations) {
       
        if (fabs(f(x1) - f(x0)) < 1e-15) {
            cout << "Division by zero error in secant method." << endl;
            return 1;
        }

        
        x2 = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0));

        if (fabs(x2 - x1) < tolerance) {
            break; 
        }

       
        x0 = x1;
        x1 = x2;

        iteration++;
    }

    cout << "The root is approximately: " << x2 << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}




REGULA FALSI 

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

int main() {
    double a, b, c;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter interval [a,b]: ";
    cin >> a >> b;

    if (f(a) * f(b) >= 0) {
        cout << "Invalid interval. f(a) and f(b) must have opposite signs." << endl;
        return 1;
    }

    int iteration = 0;
    while (iteration < maxIterations) {
       
        c = b - (f(b) * (b - a)) / (f(b) - f(a));

        if (fabs(f(c)) < tolerance) {
            break; 
        }

        if (f(a) * f(c) < 0) {
            b = c;
        } else {
            a = c;
        }

        iteration++;
    }

    cout << "The root is approximately: " << c << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}




Newton-Raphson Method

#include <iostream>
#include <cmath>
using namespace std;

double f(double x) {
    return x * x - 4;
}

double df(double x) {
    return 2 * x; 
}

int main() {
    double x0, x1;
    double tolerance = 1e-6;
    int maxIterations = 1000;

    cout << "Enter initial guess x0: ";
    cin >> x0;

    int iteration = 0;
    while (iteration < maxIterations) {
        double fx0 = f(x0);
        double dfx0 = df(x0);

        if (fabs(dfx0) < 1e-15) {
            cout << "Derivative near zero, cannot continue." << endl;
            return 1;
        }

        x1 = x0 - fx0 / dfx0;

        if (fabs(x1 - x0) < tolerance) {
            break; 
        }

        x0 = x1;
        iteration++;
    }

    cout << "The root is approximately: " << x1 << endl;
    cout << "Number of iterations: " << iteration << endl;

    return 0;
}



GAUSS ELIMINATION 

#include <iostream>
using namespace std;

int main() {
    int i, j, k, n;
    float A[20][20], c, x[10];

    cout << "Enter the size of matrix: ";
    cin >> n;

    cout << "Enter the elements of augmented matrix row-wise:\n";
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n + 1; j++) {
            cout << "A[" << i << "][" << j << "]: ";
            cin >> A[i][j];
        }
    }

   
    for (j = 1; j <= n; j++) {
        for (i = 1; i <= n; i++) {
            if (i != j) {
                c = A[i][j] / A[j][j];
                for (k = 1; k <= n + 1; k++) {
                    A[i][k] = A[i][k] - c * A[j][k];
                }
            }
        }
    }

    
    cout << "\nThe solution is:\n";
    for (i = 1; i <= n; i++) {
        x[i] = A[i][n + 1] / A[i][i];
        cout << "x" << i << " = " << x[i] << endl;
    }

    return 0;
}




GAUSS-JORDAN ELIMINATION 

#include <iostream>
using namespace std;

int main() {
    int i, j, k, n;
    float A[20][20], c, x[10], sum = 0.0;

    cout << "Enter the order of matrix: ";
    cin >> n;

    cout << "\nEnter the elements of augmented matrix row-wise:\n\n";
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n + 1; j++) {
            cout << "A[" << i << "][" << j << "] : ";
            cin >> A[i][j];
        }
    }

    // Generating upper triangular matrix
    for (j = 1; j <= n; j++) {
        for (i = 1; i <= n; i++) {
            if (i > j) {
                c = A[i][j] / A[j][j];
                for (k = 1; k <= n + 1; k++) {
                    A[i][k] = A[i][k] - c * A[j][k];
                }
            }
        }
    }

   
    x[n] = A[n][n + 1] / A[n][n];
    for (i = n - 1; i >= 1; i--) {
        sum = 0;
        for (j = i + 1; j <= n; j++) {
            sum += A[i][j] * x[j];
        }
        x[i] = (A[i][n + 1] - sum) / A[i][i];
    }

    cout << "\nThe solution is:\n";
    for (i = 1; i <= n; i++) {
        cout << "\nx" << i << " = " << x[i] << "\t";
    }

    cout << endl;
    return 0;
}